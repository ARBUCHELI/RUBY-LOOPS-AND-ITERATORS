# REDACTED!
-----------
	
* Getting the User's Input
	
--------------------------
	First things first: we’ll need to get the user’s input.

	
	Instructions
	------------
	1.
	Use puts to prompt the user for input two times. For the first puts, declare a variable called text and set it equal to the user’s input via gets.chomp.

	For the second puts, declare a variable called redact and set it equal to the user’s input using gets.chomp.

	Note: When running code that includes gets, remember to give input for the terminal. When it expects input but never receives it an error will be displayed after some time. This 
	prevents it from running indefinitely.

script.rb
---------
puts "Enter some text: "
text = gets.chomp

puts "Enter words to redact: "
redact = gets.chomp

===================================================================================================================================================================

* The .split Method
-------------------
	Next, we’ll want to divide the user’s input into individual words.

	Ruby has a built-in method for this called .split; it takes in a string and returns an array. If we pass it a bit of text in parentheses, .split will divide the string wherever it 
	sees that bit of text, called a delimiter. For example,

		text.split(",")
		tells Ruby to split up the string text whenever it sees a comma.

script.rb
---------
puts "Enter some text: "
text = gets.chomp

puts "Enter words to redact: "
redact = gets.chomp

words = text.split(" ")

==================================================================================================================================================================

* Redacted!
-----------
	All right! Time to break out our iterators to go through the user’s text.

		letters = ['a', 'b', 'c', 'd']
		letters.each do |letter|
  			print letter
		end

	The example above just serves as a reminder of using .each on the letters array.

script.rb
---------
puts "Enter some text: "
text = gets.chomp

puts "Enter words to redact: "
redact = gets.chomp

words = text.split(" ")
words.each { |word| print word }

==================================================================================================================================================================

* Control Flow Know-How
-----------------------
	Good! There were two problems with our output, though: we didn’t have spaces between our words, and our program didn’t actually replace the word we wanted to redact with the word 
	"REDACTED".

		if var == 10
   			print "Variable is 10"
		else
   			print "Variable is something else"
		end

	We can fix that with some if/else magic! The above example just reminds you how an if/else block works.

	Instructions
	------------
	1.
	Add an if/else statement inside your .each.

		. if the current word equals the word to be redacted, then print "REDACTED " with that extra space.
		. Otherwise (else), print word + " ".

	The extra space in both cases prevents the words from running together.

script.rb
---------
puts "Enter some text: "
text = gets.chomp

puts "Enter words to redact: "
redact = gets.chomp

words = text.split(" ")
words.each { |word| 
  if word == redact
    print "REDACTED "
  else
 		print word + " "
  end }

==================================================================================================================================================================

* Great Work!
-------------
	Perfect! Feel free to mess around with your redactor to see what sorts of results you get. Think about the following:

		. What could you do to make sure your redactor redacts a word regardless of whether it’s upper case or lower case?

		. How could you make your program take multiple, separate words to REDACT?

		. How might you make a new redacted string and save it as a variable, rather than just printing it to the console?

	Instructions
	------------
	These are the questions. In the meantime, click Run to finish this REDACTED.

==================================================================================================================================================================















