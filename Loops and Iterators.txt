# LOOPS & ITERATORS
-------------------
	
* The 'While' Loop
------------------
	Sometimes you want to repeat an action in Ruby while a certain condition is true, but you don’t know how many times you’ll have to repeat that action. A good example would be 
	prompting a user for a certain type of input: if they insist on giving you the wrong thing, you may have to re-ask them several times before you get the kind of input you’re 
	looking for.

	To accomplish this, we use something called a while loop. It checks to see if a certain condition is true, and while it is, the loop keeps running. As soon as the condition stops 
	being true, the loop stops!

script.rb
---------
counter = 1
while counter < 11
  puts counter
  counter = counter + 1
end

===================================================================================================================================================================

* Danger: Infinite Loops!
-------------------------
	Did you see that? The loop printed out the numbers 1 to 10, then stopped. This was because the loop’s condition said to continue while counter was less than 11; since counter went 
	up by 1 each time through the loop, the loop stopped when counter hit 11.

	What if we’d forgotten to increment counter? It would have stayed at 1, the loop would have kept checking to see if it was less than 11 (and 1 is always less than 11), and the 
	loop would never have ended. This is called an infinite loop and it will cause your programs to crash. Avoid them at all costs!

script.rb
---------
i = 0
while i < 5
  puts i
  # Add your code here!
  i += 1
end

===================================================================================================================================================================

* The 'Until' Loop
------------------
	The complement to the while loop is the until loop. It’s sort of like a backward while:

		i = 0
		until i == 6
  		i = i + 1
		end
		puts i

	1. In the example above, we first create a variable i and set it to 0 (zero).

	2. Then we execute a block of code until i is equal to 6. That block of code increments i.
	
	3. When i is equal to 6, the block ends.

	4. Finally, we print 6, the value of i, to the console.

script.rb
---------
counter = 1
until counter > 10
  puts counter
  # Add code to update 'counter' here!
  counter += 1
end

==================================================================================================================================================================

* More Assignment Operators
---------------------------
	We’ve been using syntax like counter = counter + 1, which works, but as you’ll increasingly find with Ruby, there’s always another way.

	A shortcut is to use an assignment operator. You already know one assignment operator: =, which sets a variable. You can update a variable with additional assignment operators, 
	however, which include +=, -=, *=, and /=. For instance, when you type

		counter += 1

	You’re telling Ruby: “Add 1 to counter, then assign that new value back to counter.” This provides a succinct way of updating variable values in our programs.

	Some languages have the increment operators ++ and -- (which also add or subtract 1 from a value), but Ruby does not. You’ll have to make do with += and -=!

script.rb
---------
counter = 1
while counter < 11
  puts counter
  counter += 1
end

==================================================================================================================================================================

* The 'For' Loop
----------------
	Sometimes you do know how many times you’ll be looping, however, and when that’s the case, you’ll want to use a for loop.

==================================================================================================================================================================

* Inclusive and Exclusive Ranges
--------------------------------
	You saw a bit of new syntax in the previous exercise: for num in 1...10. What this says to Ruby is: “For the variable num in the range 1 to 10, do the following.” The following 
	was to puts "#{num}", so as num took on the values of 1 to 9, one at a time, those values were printed to the console.

	The reason this program counted to 9 and not 10 was that we used three dots in the range; this tells Ruby to exclude the final number in the count: for num in 1...10 means “go up 
	to but don’t include 10.” If we use two dots, e.g. for num in 1..10, this tells Ruby to include the highest number (10) in the range.

==================================================================================================================================================================

* Building Your Own
-------------------
	Good work! You’re ready to build your very own for loop.

==================================================================================================================================================================

* The Loop Method
-----------------
	So far we’ve learned one way to repeat an action in Ruby: using loops. As is often the case in Ruby, however, there’s more than one way to accomplish a given task. In this case, 
	it’s also possible to repeat an action using an iterator.

	An iterator is just a Ruby method that repeatedly invokes a block of code. The code block is just the bit that contains the instructions to be repeated, and those instructions can 
	be just about anything you like!

	The simplest iterator is the loop method. You can create a basic (but infinite!) loop by simply typing

		loop { print "Hello, world!" }

	In Ruby, curly braces ({}) are generally interchangeable with the keywords do (to open the block) and end (to close it). Knowing this, we can write a smarter loop than the one 
	above:

		i = 0
		loop do
  			i += 1
  			print "#{i}"
  			break if i > 5
		end

	The break keyword is our Get Out of Jail Free card: it breaks a loop as soon as its condition is met.

==================================================================================================================================================================

* Next!
-------
	The next keyword can be used to skip over certain steps in the loop. For instance, if we don’t want to print out the even numbers, we can write:

		for i in 1..5
  			next if i % 2 == 0
  			print i
		end

	1. In the above example, we loop through the range of 1 through 5, assigning each number to i in turn.

	2. If the remainder of i / 2 is zero, we go to the next iteration of the loop.

	3. Then we print the value of i. This line only prints out 1, 3, and 5 because of the previous line.

==================================================================================================================================================================











